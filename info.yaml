--- 
# Tiny Tapeout project information
project:
  wokwi_id:    378916767374334977    # If using wokwi, set this to your project's ID

# If using an HDL, set wokwi_id as 0 and uncomment and list your source files here. 
# Source files must be in ./src and you must list each source file separately
#  source_files:        
#    - counter.v
#    - decoder.v
#  top_module:  "tt_um_example"      # Put the name of your top module here, must start with "tt_um_". Make it unique by including your github username

# How many tiles your design occupies? A single tile is about 167x108 uM.
  tiles: "1x1"    # Valid values: 1x1, 1x2, 2x2, 3x2, 4x2 or 8x2

# Keep a track of the submission yaml
yaml_version: 4

# As everyone will have access to all designs, try to make it easy for someone new to your design to know what
# it does and how to operate it. This info will be automatically collected and used to make a datasheet for the chip.
#
# Here is a great example: https://github.com/davidsiaw/tt02-davidsiaw-stackcalc/blob/38c5647f83aad2aec675d566aa3d67b98f0aac81/info.yaml
documentation: 
  author:       "Hendrik"                # Your name
  title:        "Water Pump Controller"  # Project title
  language:     "Wokwi"                  # other examples include Verilog, Amaranth, VHDL, etc
  description:  "Controller for a camping van water pump with multiple tap switches and timer" # Short description of what your project does

# Longer description of how the project works. You can use standard markdown format.
  how_it_works: |
      ## What is this?

My family got a caravan with a tiny bathroom and a kitchen which have water supply.
The sinks are equipped with taps with integrated switches and there is a toilet
which has a pushbutton for flushing.

All switches are basically wired in parallel and turn on the pump in the water tank. There
is also a main switch that cuts power to the whole pumping system.

This sounds like a reasonable and simple circuit that should not cause any trouble.

However, the manual mentions that the main switch should be turned off when no water
is needed to make sure that the pump is not running too long. This switch is hard to
reach and it is therefore left on most of the time. Usually that does not cause any
problems (since the switches in the taps will be off when no water is requested). But
there was one occasion where the pump was running when we did not take any water. No one
knows for sure how long it was running, but luckily the pump survived.

Another problem is that the switches in the taps are not rated for the current that
the installed pump can draw. One tap's switch already broke, it is no longer fully
conductive and it cannot activate the pump any more.

To address these problems I plan to build a controller that reads the states of the
switches (using low current to avoid overloading them) and turns on the pump
accordingly.

The controller should also turn off the pump if the switches are stuck for too long.
I believe that something in the range of two minutes is a reasonable time. This would
make sure that the pump is not running for too long while not being in the way too
much. Usually filling a pot for cooking or taking a shower (if we'd ever make use of
that feature) does not require uninterrupted water supply for more than that.

There will also be support for a buzzer that can warn a bit before the water is turned
off and one could reset the timer by just shortly iterrupting the water flow.

The buzzer sound will change when the warning time is over and the pump was turned off.
The sequence used after the timeout can be used to tell which input is still active to
help with finding a tap that might not be fully closed.

The chip has more outputs than needed. Additional outputs were configured to drive LEDs
that can be used to indicate the state of the controller.

The controller has an input for a water pressure switch. Some systems do not use switches
in the taps but try to maintain a constant high pressure in the pipes, similar to what a
home installation would provide. One could also use such a switch as an additional way to
prevent the pump running when all taps are closed.

The timeout feature can be disabled.

## How can it be used?

### Inputs

#### Taps with switches

This is the main use case, basically as described above. The controller has six separate
inputs for switches. This can be used to help with finding problems with stuck switches but
is also helpful to keep certain circuits separated. In our system for example the toilet
flush button activates the pump and also a solenoid valve. It is releasing the water
similar to what the classical part of the taps would do for the sinks. Having a dedicated
input at the controller can help with simplifying parts of the wiring.

#### Pressure switch

A pressure switch can be used to keep a nearly constant pressure in the pipe system,
comparable to what one usually has at home.

One can see this as "turn on the pump if the pressure is too low" or "turn off the pump
when the pressure is too high". It would even be possible to use two switches, where the
high pressure switch is there only as a fallback and not meant to be triggered. Such an
additional switch is oftentimes used in systems for heating water.

This controller has a dedicated input for a high pressure switch to turn off the pump when
all taps are closed but a tap switch might still be active.

A low pressure switch for keeping the pressure in the system at a certain level could be
connected at a tap switch input and would (depending on the timeout enable input) benefit
from the timeout logic as well. If the low pressure signal is active for too long, it
either means that water is taken from a tap or there is a leak. If water is intentionally
taken, the same considerations as for the tap switches regarding the duration apply.

#### Timeout enable

If the timeout feature is not useful, but the logic is still considered helpful, it can
be disabled. Although the chip should not get into strange states when this pin is toggled
during use, the intended and tested use case is that this signal is fixed for a given system.

#### Clock

The chip is designed to run from a 32768Hz clock. That's a reasonably low frequency and easily
available as a crystal. Since the timing is not critical, any other clock in that range can
be used as well.

The timing could also be changed intentionally by chosing another frequency. Just keep in mind
that the ratio of warning-to-timeout to start-to-warning is fixed. And the pitch and durations
of the buzzer sounds is derived from the same clock as well.

#### Reset

The circuit is meant to be reset during power up. However, if all tap switches are off initially,
the circuit is reset as well. So in case any switch is on when power is applied and external reset
is not used, a wrong warning or timeout might occur, including an already timed-out state.

### outputs

#### Pump (OUT0)

This pin is meant to drive a transistor that can control the pump motor either directly or via
a relay.

It can also be used to drive an LED that could indicate a running pump. There are other pins for
LEDs with slightly different meaning, see below.

#### Buzzer (OUT6)

The controller can signal a long running pump with a buzzer. It will first give a reminder that
the water is running relatively long already. When the water is automatically turned off from the
timeout, the signal helps to identify the switch that is still active.

#### LEDs

There are a couple of outputs that can indicate the state of the controller.

One output (OUT1) is similar to the pump control output, but would not be turned off if the pump gets
disabled because the high pressure switch input was activated. This helps to prevent that users
get the impression that the system is turned off when it is not.

This output can be combined with OUT5 (RunLong). It is indicating that the warning time or timeout
was reached. When using a dual color (green/red) LED, the green LED could be used for the active
pump signal and the red one for the RunLong signal. The LED would then appear green when the pump is
running, orange when the warning time is reached (both LEDs are on) and red when the timeout disabled
the pump (only RunLong stays active).

The outputs OUT2:OUT4 can be used together as an alternative to the combined LED described above. In
this variant there would be one dedicated LED for running normally, reaching the warning time and pump
being turned off from the timeout.

## How does it work?

### Logic blocks

#### Needs water

A couple of OR-gates are used to determine if one of the tap inputs is active and water is needed or
requested. This gives the main signal for activating the pump.

#### LEDs

There are different LED outputs (see above for details). They are activated depending on the state of
the controller and a logical combination of water request and timer (warning phase or timed out).

#### Buzzer

The buzzer is activated during the warning phase and when the timeout is active with different signals.
Both signals are combined using an OR-gate.

The warning signal is generated using a group or AND-gates from the 1kHz signal, the warning state line
and the lines for 0.5Hz to 4Hz. This gives a beep that repeats every 2 seconds and is on for 125 ms.

The generation of the timed-out signal is more complex and described below since it contains more timing
parts.

### Timing blocks

#### Frequency divider

The frequency divider is built from a simple counter with 22 D-Flip-Flops. It is held in reset state when
none of the tap inputs is active or when the external reset is active. It provides other blocks with various
timing signals, including the warning/timeout, buzzer frequency and sequence.

#### Warning and timeout

The warning and timeout signals are each generated by a D-Flip-Flop. They are activated at the chosen
timer/counter value and stay active afterwards until they are reset by disabling all tap switches or an
external reset.

#### Timed-out buzzer sequence

The timed-out buzzer sequence depends on which tap switch is active. The number of beeps in that sequence
reflects the ID or position of the first active input.

One D-Flip-Flop is used to activate the sequence every 16 seconds. It is set high (data is tied to H) on
the rising edge of the 16s counter signal when the controller is in the timeout state. It is reset at the
end of the sequence or by the global reset.

A series of D-Flip-Flops form a sequence counter where with each clock tick an additional output is
activated. The signal that defines the beep duration and interval is used as the clock for this sequence
generator. This sequence generator is held in reset state by the signal that also sets the buzzer active
Flip-Flop mentioned above. Depending on which input is active, one of the sequence outputs is used to reset
the Flip-Flop that activates the buzzer. The signals are combined using AND-gates for selecting the right
sequence step and OR-gates to allow any of those selected signals to reset the buzzer active state.

The actual timed-out buzzer signal is then a combination of the 2kHz signal the duration and interval line
(two beeps per second at 25% duty cycle), enabled by the already described active Flip-Flop. This times-out
signal is then combined into the buzzer output signal using the OR-gate as described above.

# Instructions on how someone could test your project, include things like what buttons do what and how to set the clock if needed
  how_to_test:  |
      Explain how to test your project

# A description of what the inputs do (e.g. red button, SPI CLK, SPI MOSI, etc).
  inputs:               
    - TapA: Input for switch of first tap. Active tap should be high level.
    - TapB: Input for switch of second tap. Active tap should be high level.
    - TapC: Input for switch of third tap. Active tap should be high level.
    - TapD: Input for switch of fourth tap. Active tap should be high level.
    - TapE: Input for switch of fifth tap. Active tap should be high level.
    - TapF: Input for switch of sixth tap. Active tap should be high level.
    - EnableTimeout: Timeout is anabled when high level is applied.
    - PressureHigh: Input for optional pressure sensor. Pump is disabled when signal has high level.
# A description of what the outputs do (e.g. status LED, SPI MISO, etc)
  outputs:
    - Pump: Use to activate the pump
    - PumpEnabled: LED for pump activity
    - ActiveNormal: LED for normal operation
    - ActiveWarning: LED signalling that the warning timeout is reached
    - ActiveHalted: LED signalling that the pump was disabled after a timeout
    - RunLong: LED showing that the warning or timeout periods were reached
    - Buzzer: Controls a buzzer
    - none
# A description of what the bidirectional I/O pins do (e.g. I2C SDA, I2C SCL, etc)
  bidirectional:
    - none
    - none
    - none
    - none
    - none
    - none
    - none
    - none

# The following fields are optional
  tag:          "utility, timer"  # comma separated list of tags: test, encryption, experiment, clock, animation, utility, industrial, pwm, fpga, alu, microprocessor, risc, riscv, sensor, signal generator, fft, filter, music, bcd, sound, serial, timer, random number generator, calculator, decoder, counter, puzzle, multiplier, game, oscillator,
  external_hw:  "32768Hz clock (does not need to be prcise, actually), power on reset, controlled water supply system (tap switches, pump), optionally LEDs and Buzzer for controller states"      # Describe any external hardware needed
  discord:      "henner0207"      # Your discord handle, used for communication and automatically assigning tapeout role after a submission
  doc_link:     ""      # URL to longer form documentation, eg the README.md in your repository
  clock_hz:     32768   # Clock frequency in Hz (if required)
  picture:      ""      # relative path to a picture in your repository (must be 512kb or less)
